<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Academic</title>
    <link>https://example.com/</link>
      <atom:link href="https://example.com/index.xml" rel="self" type="application/rss+xml" />
    <description>Academic</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Academic</title>
      <link>https://example.com/</link>
    </image>
    
    <item>
      <title>Example Talk</title>
      <link>https://example.com/talk/example-talk/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      <guid>https://example.com/talk/example-talk/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Wowchemy&amp;rsquo;s &lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further event details, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;page elements&lt;/a&gt; such as image galleries, can be added to the body of this page.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Шпаргалка иностранных слов С#</title>
      <link>https://example.com/project/example/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/project/example/</guid>
      <description>&lt;p&gt;Одним из самых своих первых проектов я бы хотел посвятить моей недавней идее, а именно - приложению на языке С# для простого способа выучивания иностранных слов. Оно будет выдавать пользователю список слов, которые пользователь будет должен перевести, причём пользователь может сам контролировать список интересующих его слов. Если вдруг пользователь неправильно перевёл слово, то ему показывается правильный ответ, и ошибка записывается в список ошибок, который пользователь может посмотреть в любое время. Концепция довольно простая, однако думаю это будет хороший опыт в разработкке простых приложений на С#.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки научного программирования</title>
      <link>https://example.com/post/4/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/4/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;&lt;strong&gt;Введение&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Язы́к программи́рования — формальный язык, предназначенный для записи компьютерных программ. Язык программирования определяет набор лексических, синтаксических и семантических правил, определяющих внешний вид программы и действия, которые выполнит исполнитель (обычно — ЭВМ) под её управлением.&lt;/p&gt;
&lt;p&gt;Со времени создания первых программируемых машин человечество придумало более восьми тысяч языков программирования (включая эзотерические, визуальные и игрушечные). Каждый год их число увеличивается. Некоторыми языками умеет пользоваться только небольшое число их собственных разработчиков, другие становятся известны миллионам людей. Профессиональные программисты могут владеть несколькими языками программирования.&lt;/p&gt;
&lt;p&gt;Язык программирования предназначен для написания компьютерных программ, которые представляют собой набор правил, позволяющих компьютеру выполнить тот или иной вычислительный процесс, организовать управление различными объектами, и т. п. Язык программирования отличается от естественных языков тем, что предназначен для управления ЭВМ, в то время как естественные языки используются, прежде всего, для общения людей между собой. Большинство языков программирования использует специальные конструкции для определения и манипулирования структурами данных и управления процессом вычислений.&lt;/p&gt;
&lt;p&gt;Как правило, язык программирования определяется не только через спецификации стандарта языка, формально определяющие его синтаксис и семантику [⇨], но и через воплощения (реализации) стандарта — программные средства, обеспечивающие трансляцию или интерпретацию программ на этом языке [⇨]; такие программные средства различаются по производителю, марке и варианту (версии), времени выпуска, полноте воплощения стандарта, дополнительным возможностям; могут иметь определённые ошибки или особенности воплощения, влияющие на практику использования языка или даже на его стандарт.&lt;/p&gt;
&lt;h2 id=&#34;языки-низкого-и-высокого-уровня&#34;&gt;&lt;strong&gt;Языки низкого и высокого уровня&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Обычно под «уровнем языка» понимается:&lt;/p&gt;
&lt;p&gt;степень отличия семантики языка от машинного кода целевой архитектуры процессора — другими словами, наименьший масштаб преобразований, которые должен претерпеть код программы перед тем, как он сможет исполняться (зачастую с существенной потерей эффективности)
степень, в которой семантика языка учитывает особенности мышления человека, нежели машины — то есть уровень языка тем «ниже», чем он «ближе к машине», и тем «выше», чем он «ближе к человеку».
Эта двойственность появилась в 1950-е годы, при создании языков Планкалкюль и Фортран. При их разработке ставились прямые намерения обеспечить более краткую запись часто встречающихся конструкций (например, арифметических выражений), чем требовали процессоры того времени. В этих языках вводился новый слой абстракции и предполагались преобразования программ в машинный язык, поэтому их назвали языками «высокого уровня», то есть надстройкой, надслоением над языком машины. Однако вскоре стало ясно, что эти определения вовсе не обязательно идут бок о бок. Так, история знает случаи, когда язык, традиционно считающийся «высокоуровневым», реализовывался аппаратно (см. Лисп-машина, Java Optimized Processor[en]), или когда язык, являющийся «низкоуровневым» на одной платформе, компилировался как «высокоуровневый» на другой (таким образом программы на CISC-ассемблере VAX использовались на RISC-машинах DEC Alpha — см. VAX Macro[en]). Таким образом, понятие уровня языка является не строго формальным, а скорее условным.&lt;/p&gt;
&lt;p&gt;К языкам низкого уровня относят, в первую очередь, машинные языки (или, на общеупотребимом жаргоне — машинные коды), то есть языки, реализованные непосредственно на аппаратном уровне. Их относят к первому поколению языков программирования[en]. Вскоре после них появились языки второго поколения[en] — так называемые «языки ассемблера». В простейшем случае они реализуют мнемонику над машинным языком для записи команд и их параметров (в частности, адресов в памяти). Кроме того, многие языки ассемблера включают и весьма развитый макроязык. Языки первого и второго поколения позволяют точно контролировать, как требуемая функциональность будет исполняться на данном процессоре с учётом особенностей его архитектуры. С одной стороны, это обеспечивает высокое быстродействие и компактность программ, но с другой, для переноса программы на другую аппаратную платформу её нужно перекодировать (а часто из-за различий архитектуры процессоров — и перепроектировать) с нуля. Большинство языков ассемблера являются бестиповыми, но существуют и типизированные языки ассемблера[en], нацеленные на обеспечение минимальной безопасности&amp;raquo;&amp;gt; низкоуровневых программ.&lt;/p&gt;
&lt;p&gt;К 1970-м годам сложность программ выросла настолько, что превысила способность программистов управляться с ними, и это привело к огромным убыткам и застою в развитии информационных технологий. Ответом на эту проблему стало появление массы языков высокого уровня, предлагающих самые разные способы управления сложностью (подробнее см. парадигма программирования и языки для программирования в мелком и крупном масштабе). Программы на языках «высокого уровня» гораздо легче модифицируются и совсем легко переносятся с компьютера на компьютер. На практике, наибольшее распространение получили языки третьего поколения, которые лишь претендуют на звание «высокоуровневых», но реально предоставляют лишь те «высокоуровневые» конструкции, что находят однозначное соответствие инструкциям в машине фон Неймана.&lt;/p&gt;
&lt;p&gt;К языкам четвёртого поколения относят языки высшего порядка&amp;raquo;&amp;gt;. Иногда выделяется категория языков пятого поколения, но она не является общепринятой — чаще используется термин «язык сверхвысокого уровня» (англ. very high level language). Это языки, реализация которых включает существенную алгоритмическую составляющую (то есть когда интерпретация небольшого исходного кода требует весьма сложных вычислений). Чаще всего так называют логические языки, про которые также говорят, что это просто языки четвёртого поколения, дополненные базой знаний. Кроме того, к «языкам сверхвысокого уровня» относят визуальные языки и языки, основанные на подмножестве естественного языка (например, так называемой «деловой прозы»).&lt;/p&gt;
&lt;p&gt;Важной категорией являются предметно-ориентированные языки (англ. DSL — Domain Specific Language). Отнесение языка к этой категории является весьма условным и зачастую спорным; на практике этот термин могут применять к представителям и третьего, и четвёртого, и пятого поколений языков. Порой так даже классифицируют язык Си, который можно отнести к поколению «2,5». Он изначально позиционировался как «высокоуровневый ассемблер»; его также часто называют «языком среднего уровня». Он позволяет в значительной степени контролировать способ реализации алгоритма с учётом свойств, типичных для весьма большого числа аппаратных архитектур. Однако есть платформы, под которые реализации Си (даже в нестандартном виде) отсутствуют по причине принципиальной невозможности или нецелесообразности их создания. Со временем появились и другие языки среднего уровня, например, LLVM, C&amp;ndash;.&lt;/p&gt;
&lt;p&gt;Первые три поколения языков формируют императивную парадигму программирования, а последующие — декларативную. Термин «императив» означает «приказной порядок», то есть программирование посредством пошагового инструктирования машины, или детального указания уже придуманного программистом способа реализации технического задания. Термин «декларатив» означает «описание», то есть программирование посредством предоставления формализации технического задания в виде, пригодном для автоматических преобразований[en], с предоставлением свободы выбора транслятору языка. Императивные языки нацелены на описание того, как получить результат, тогда как языки более высокого уровня нацелены на описание того, что требуется в результате. Поэтому первые называют как-языками (или языками, ориентированными на машину), а вторые — что-языками (или языками, ориентированными на человека). Для множества задач полностью автоматическое порождение по-настоящему эффективной реализации алгоритмически неразрешимо, так что на практике даже на что-языках нередко используются определённые алгоритмические ухищрения. Однако существуют методы получения эффективных реализаций из основанных на определении (реализаций «в лоб») — такие как изобретённая в СССР суперкомпиляция.&lt;/p&gt;
&lt;p&gt;В большинстве случаев языки высокого уровня порождают машинный код большего размера и исполняются медленнее. Однако некоторые языки высокого уровня для алгоритмически и структурно сложных программ могут давать заметное преимущество в эффективности, уступая низкоуровневым лишь на небольших и простых программах (подробнее см. эффективность языков). Иначе говоря, потенциальная эффективность языка меняется с повышением его «уровня» нелинейно и вообще неоднозначно. Однако скорость разработки и трудоёмкость модификации, устойчивость и другие показатели качества в сложных системах оказываются гораздо важнее предельно возможной скорости исполнения — они обеспечивают различие между программой, что работает, и той, что нет — так что экономически более целесообразна эволюция аппаратного обеспечения (исполнение большего числа инструкций в единицу времени) и методов оптимизирующей компиляции (более того, последние десятилетия эволюция аппаратного обеспечения движется в направлении поддержки методов оптимизирующей компиляции для языков высокого уровня). К примеру, автоматическая сборка мусора, присутствующая в большинстве высокоуровневых языков программирования, считается одним из важнейших улучшений, благотворно повлиявших на скорость разработки.&lt;/p&gt;
&lt;p&gt;Поэтому в наши дни языки низкого уровня используются только в задачах системного программирования. Распространено мнение, что в задачах, где необходим точный контроль за ресурсами, язык сам должен требовать как можно меньше преобразований, иначе все усилия программиста окажутся напрасными. В действительности есть примеры, опровергающие это. Так, язык BitC является представителем четвёртого поколения (функциональной парадигмы программирования), но целиком и полностью ориентирован именно на системное программирование и уверенно конкурирует по скорости с Си. То есть, это «высокоуровневый язык», предназначенный для «низкоуровневого программирования». Языки третьего поколения C# и Limbo разрабатывались для использования одновременно как в системном программировании (с целью повышения отказоустойчивости операционной системы), так и в прикладном — это обеспечивает единство платформы, что сокращает потери при трансляции.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Оформление отчета</title>
      <link>https://example.com/post/3/</link>
      <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/3/</guid>
      <description>&lt;h2 id=&#34;основы&#34;&gt;&lt;strong&gt;Основы&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Составляя отчет по практике, студент оценивает результаты работы и делает выводы о своей квалификации, знаниях и навыках, полученных в вузе. Чтобы работу приняли, она должна быть не только грамотной и содержательной. Оформление отчета по ГОСТу позволит вам получить «отлично» или хотя бы «хорошо».&lt;/p&gt;
&lt;p&gt;Обычно требования к оформлению отчета прописывают в методичках. Если таковых не осталось на кафедре или в библиотеке, обратитесь к нормативным документам.&lt;/p&gt;
&lt;p&gt;Оформление отчета по практике по ГОСТу отнимает много времени? Воспользуйтесь чужим опытом – скачайте работы, актуальные на текущий год, и посмотрите, как они оформлены. Главное, чтобы эти примеры сами соответствовали последним требованиям.&lt;/p&gt;
&lt;p&gt;Структура отчета по практике
Отчет может содержать до 35-40 страниц. В некоторых случаях допускается увеличивать объем до 45 страниц. При этом на введение отводят две-три страницы. В работе может быть до четырех разделов.&lt;/p&gt;
&lt;p&gt;Согласно ГОСТам, отчет по практике должен иметь следующую структуру:&lt;/p&gt;
&lt;p&gt;— титульный лист;&lt;/br&gt;
— план прохождения практики;&lt;/br&gt;
— отзыв руководителя;&lt;/br&gt;
— аннотация;&lt;/br&gt;
— раздел с сокращениями и условными обозначениями;&lt;/br&gt;
— оглавление и введение;&lt;/br&gt;
— основная часть практической работы;&lt;/br&gt;
— заключение;&lt;/br&gt;
— использованная литература списком;&lt;/br&gt;
— приложения и дополнительные материалы.&lt;/p&gt;
&lt;p&gt;Приложения включаются в практику по мере необходимости.&lt;/p&gt;
&lt;p&gt;В отчет по практике всегда входит план и отзыв научного руководителя. Эти два раздела следуют в работе один за другим. После отзыва научного руководителя размещают аннотацию. В ней подчеркивается актуальность работы, размещается ее краткая характеристика. Введение должно содержать данные о практике: время, место, продолжительность практики, а также виды выполненных работ.&lt;/p&gt;
&lt;p&gt;Требования к оформлению работы
Оформление работы по ГОСТ подразумевает не только строгую структуру, но и выбор определенных шрифтов и их размеров, грамотное оформление списка литературы и правильное размещение графических элементов в тексте.&lt;/p&gt;
&lt;p&gt;Текстовую часть практической работы выполняют тремя основными способами:&lt;/p&gt;
&lt;p&gt;— на компьютере согласно ГОСТ 2.004;&lt;/br&gt;
— на пишущей машинке;&lt;/br&gt;
— от руки – согласно ГОСТ 2.304 (речь идет об использовании чертежного шрифта).&lt;/p&gt;
&lt;p&gt;Если отчет набирают на компьютере и распечатывают на принтере, то работать следует в Word или аналогичном редакторе. Распечатывают отчет на листах А4. Текст набирают шрифтом Times New Roman. Заголовки разделов имеют размер шрифта 16 пунктов, заголовки подразделов — 14 пунктов. Основной текст выполняют обычным шрифтом размером в 14 пунктов. Шрифт в разделах и подразделах полужирный. При оформлении нужно выбрать одинарный межстрочный интервал.&lt;/p&gt;
&lt;p&gt;Дополнительную информацию можно узнать в ГОСТ 2.105-79 и ГОСТ 7.32-2001.&lt;/p&gt;
&lt;p&gt;Разделы и подразделы в отчете
Отчет по практике разбивают на разделы и подразделы. При необходимости в работу включают пункты и списки. Разделы практически всегда начинаются с нового листа. Их нумеруют арабскими цифрами в порядке очередности. Название раздела выравнивают по центру, для него используют полужирный шрифт Times New Roman (16 шингл).&lt;/p&gt;
&lt;p&gt;Подразделы нумеруют арабскими цифрами. Для названия разделов используют прописные буквы, для подразделов – строчные (за исключением первой). Последние выравнивают по левому краю, используя красную строку. Для подразделов используют полужирный шрифт (14 шингл).&lt;/p&gt;
&lt;p&gt;Желательно, чтобы название разделов были максимально краткими – переносить слова нельзя. То же касается и  подразделов. Расстояние между названием раздела и заголовком подраздела должно составлять 8 мм.&lt;/p&gt;
&lt;p&gt;Поля, отступы и страницы
Как уже было сказано ранее, отчет по практике оформляется на листах формата А4. Это требование касается всех листов в работе, включая титульный. На листах не должно быть рамки  и подобных элементов. Достаточно отступов: слева – 30 мм, справа – 10 мм, сверху – 15 мм, снизу – 20 мм.&lt;/p&gt;
&lt;p&gt;Страницы нумеруют, отсчет начинается с титульного листа. Номер на титуле не проставляют.&lt;/p&gt;
&lt;p&gt;Графика, таблицы и другие элементы
В отчете по практике могут присутствовать графические элементы, таблицы и формулы.. Согласно ГОСТ, изображения, таблицы и схемы можно разместить:&lt;/p&gt;
&lt;p&gt;— сразу после абзаца, в котором упоминается элемент;&lt;/br&gt;
— на следующей странице;&lt;/br&gt;
— в приложении.&lt;/p&gt;
&lt;p&gt;Наиболее удобен первый способ: человек, который начнет читать отчет, точно не потеряет важные данные. Он сразу ознакомится со всеми графическими элементами.&lt;/p&gt;
&lt;p&gt;Формулы размещают непосредственно после упоминания. Их выравнивают по центру.&lt;/p&gt;
&lt;p&gt;Формулу можно создать с помощью редактора Equation Editor, а затем вставить в текст работы. Обычно используют 14 шингл для символов в формуле.&lt;/p&gt;
&lt;p&gt;Требования к форме изложения текста отчета
Отдельные символы в отчете по практике употреблять нельзя:&lt;/p&gt;
&lt;p&gt;— значок диаметра (вместо этого пишут слово «диаметр»);&lt;/br&gt;
— символ «-« для обозначения отрицательной температуры (вместо этого пишут слово «минус»);&lt;/br&gt;
— индексы стандартов без регистрационного номера;&lt;/br&gt;
— математические символы &amp;lt;, &amp;gt; и = без чисел.&lt;/p&gt;
&lt;p&gt;В отчете по практике может быть собственная система наименований или сокращений, но только при наличии соответствующего раздела. Его нужно разместить перед оглавлением.&lt;/p&gt;
&lt;p&gt;Работа над отчетом по практике может показаться тяжелой и муторной, но это совсем не так сложно, как кажется. Текстовый редактор облегчит задачу.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Язык разметки Markdown</title>
      <link>https://example.com/post/2/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/2/</guid>
      <description>&lt;h2 id=&#34;что-такое-markdown&#34;&gt;&lt;strong&gt;Что такое Markdown?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Markdown — язык разметки текстов. Такие тексты легко писать и читать. Их можно без труда сконвертировать в HTML. Большинство программистов предпочитают Markdown для написания документации, описаний своих проектов, написания блогов и так далее.&lt;/p&gt;
&lt;h2 id=&#34;что-это-значит&#34;&gt;&lt;strong&gt;Что это значит?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;«Язык разметки» — это просто набор соглашений, правил.&lt;/p&gt;
&lt;p&gt;Допустим, что вы общаетесь с другом по СМС. В них нельзя сделать текст жирным или наклонным. Вы договариваетесь с другом: если я пишу &lt;em&gt;что-то&lt;/em&gt; вот так между звездочками, то считай, что это наклонный текст. А если я пишу &lt;strong&gt;что-то&lt;/strong&gt; между двумя звездочками, то считай, что это жирный текст. Вы придумали правила.&lt;/p&gt;
&lt;p&gt;Markdown — это набор подобных правил.&lt;/p&gt;
&lt;p&gt;Правила понятны разным программам и сайтам. Например, «Вопросы и ответы» в уроках на Хекслете поддерживают Markdown. Это значит, что вы можете писать туда тексты по правилам Markdown, а после нажатия «Отправить» разметка станет реальной: текст в одинарных звездочках станет наклонным, текст в двойных звездочках станет жирным и так далее. Это конвертация из Markdown в HTML.&lt;/p&gt;
&lt;h2 id=&#34;зачем-это-нужно&#34;&gt;&lt;strong&gt;Зачем это нужно?&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Для добавления разметки туда, где невозможна реальная разметка. Например, в простом текстовом файле или в тех же СМС, где невозможно выделение жирным, создание заголовков, выделение цитат и пр.&lt;/li&gt;
&lt;li&gt;Для более удобного написания текстов для последующей конвертации в HTML или другие форматы.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;синтаксис-markdown&#34;&gt;&lt;strong&gt;Синтаксис Markdown&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Это краткий справочник основных элементов синтаксиса Markdown. Единого стандарта не существует и разные версии Markdown могут отличаться в деталях. Но базовые элементы из списка ниже поддерживаются во всех стандартах.&lt;/p&gt;
&lt;h3 id=&#34;выделение-текста&#34;&gt;&lt;strong&gt;Выделение текста&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Этот текст будет наклонным (курсив)&lt;/em&gt;&lt;/br&gt;
&lt;em&gt;Этот текст будет наклонным (курсив)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Этот текст будет жирным&lt;/strong&gt;&lt;/br&gt;
&lt;strong&gt;Этот текст будет жирным&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;_Можно &lt;strong&gt;вставлять&lt;/strong&gt; один тип в другой&lt;/p&gt;
&lt;h3 id=&#34;заголовки&#34;&gt;&lt;strong&gt;Заголовки&lt;/strong&gt;&lt;/h3&gt;
&lt;h1 id=&#34;это-самый-крупный-заголовок-он-превращается-в-тег-h1&#34;&gt;Это самый крупный заголовок, он превращается в тег &lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&amp;lsquo;##&amp;rsquo; &lt;h2&gt;
&amp;lsquo;###&amp;rsquo; &lt;h3&gt;
&amp;lsquo;####&amp;rsquo; &lt;h4&gt;
&amp;lsquo;#####&amp;rsquo; &lt;h5&gt;
&amp;lsquo;######&amp;rsquo; &lt;h6&gt;&lt;/p&gt;
&lt;h3 id=&#34;ссылки&#34;&gt;&lt;strong&gt;Ссылки&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hexlet.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexlet.io&lt;/a&gt; — текст простой ссылки станет кликабельной ссылкой автоматически
Ссылкой можно сделать любой текст:&lt;/p&gt;
&lt;p&gt;&amp;lsquo;[Это ссылка на Хекслет]&amp;rsquo;(&lt;a href=&#34;https://hexlet.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexlet.io&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;цитата&#34;&gt;&lt;strong&gt;Цитата&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&amp;lsquo;&amp;gt;&amp;rsquo; Это мудрая цитата&lt;/br&gt;
&amp;lsquo;&amp;gt;&amp;rsquo; Мудрого человека.&lt;/p&gt;
&lt;h3 id=&#34;картинки&#34;&gt;&lt;strong&gt;Картинки&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&amp;lsquo;![Это опциональный alt-текст]&amp;rsquo;(/assets/images/markdown/markdown.png)
Код
Для выделения кода (или любого неотформатированного текста) используются специальные символы — обратные тики: `&lt;/p&gt;
&lt;p&gt;Иногда нужно добавить кусок кода &lt;code&gt;function(12);&lt;/code&gt; в обычную строчку текста.
А иногда нужно вставить целый блок кода:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;списки&#34;&gt;&lt;strong&gt;Списки&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Непронумерованный список:&lt;/p&gt;
&lt;p&gt;&amp;lsquo;&lt;em&gt;&amp;rsquo; Пункт
&amp;lsquo;&lt;/em&gt;&amp;rsquo; Еще один пункт
&amp;lsquo;&lt;em&gt;&amp;rsquo; Подпункт
&amp;lsquo;&lt;/em&gt;&amp;rsquo; Еще один подпункт&lt;/br&gt;
Пронумерованный список:&lt;/p&gt;
&lt;p&gt;&amp;lsquo;1.&amp;rsquo; Пункт
&amp;lsquo;1.&amp;rsquo; Еще один пункт
&amp;lsquo;1.&amp;rsquo; Подпункт
&amp;lsquo;1.&amp;rsquo; Еще один подпункт&lt;/br&gt;
В пронумерованном списке можно использовать любые числа — это не важно. При конвертации в HTML или другой формат числа станут правильными и последовательными (1, 2, 3 и т.д.).&lt;/p&gt;
&lt;p&gt;Дополнительно про Markdown&lt;/br&gt;
&lt;a href=&#34;https://ru.wikipedia.org/wiki/Markdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Markdown в Википедии&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CI/CD</title>
      <link>https://example.com/post/getting-started/</link>
      <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;принципы&#34;&gt;Принципы&lt;/h2&gt;
&lt;p&gt;Концепция непрерывной интеграции и доставки (CI/CD) — основа наших тестирований. Для тех, кто не знает: CI/CD — концепция, которая реализуется как конвейер, облегчая слияние только что закомиченного кода в основную кодовую базу. Концепция позволяет запускать различные типы тестов на каждом этапе (выполнение интеграционного аспекта) и завершать его запуском с развертыванием закомиченного кода в фактический продукт, который видят конечные пользователи (выполнение доставки).&lt;/p&gt;
&lt;p&gt;CI/CD необходимы для разработки программного обеспечения с применением Agile-методологии, которая рекомендует использовать автоматическое тестирование для быстрой наладки рабочего программного обеспечения. Автоматическое тестирование дает заинтересованным лицам доступ к вновь созданным функциям и обеспечивает быструю обратную связь.&lt;/p&gt;
&lt;p&gt;Недавно я настраивал конвейерную обработку CI/CD для проекта as-of-yet-under-wraps, который предназначен для местных профессионалов, испытывающих трудности с поиском работы. Далее я расскажу, что сделал, и поделюсь своими мыслями о CI/CD.&lt;/p&gt;
&lt;p&gt;Содержание&lt;/p&gt;
&lt;p&gt;Мы рассмотрим принципы CI/CD.&lt;/p&gt;
&lt;p&gt;Первый принцип CI/CD: сегрегация ответственности заинтересованных сторон.
Второй принцип CI/CD: снижение риска.
Третий принцип CI/CD: короткий цикл обратной связи.
Реализации среды в CI/CD.
Инструменты для CI/CD.
Приступим.&lt;/p&gt;
&lt;p&gt;Первый принцип CI/CD: сегрегация ответственности заинтересованных сторон
Одним из основных преимуществ CI/CD является своевременное участие различных заинтересованных сторон в любом проекте.&lt;/p&gt;
&lt;p&gt;Разработчики и дизайнеры (Devs) создают опыт и логику продукта, представленные в рассказах пользователей, и несут ответственность за создание работающий функций, доказывая это через модульные тесты.&lt;/p&gt;
&lt;p&gt;Инженеры по качеству (QE) отвечают за поддержание качества продукции, просмотр функций по мере их выполнения (см. определение «Готово») и вводят сквозные (E2E) функции / приемочные тесты, чтобы установить, что клиент получит продукт работающий без ошибок.&lt;/p&gt;
&lt;p&gt;Бизнес-аналитики (BAs) и владельцы продуктов (POs) несут ответственность за приемлемость (например, стоимость бизнеса), что подтверждается взаимодействием с фактическими пользователями и созданием пользовательских историй. Они координируют и анализируют результаты приемочных тестов для проверки рассказов пользователей и, возможно, создания новых, основанных на отзывах.&lt;/p&gt;
&lt;p&gt;Оперативный отдел (Ops)/ DevOps-инженеры несут ответственность за доступность продукта пользователям. Работая в области CI/CD, они масштабируют концепции по мере необходимости и разрабатывают логистику кода, чтобы код от разработчиков мог перейти в производственную среду и пользователи могли получать доступ.&lt;/p&gt;
&lt;p&gt;Пользователи несут ответственность за использование продукта. Подразумевается, что продукт должен быть полезен и оправдывать усилия.&lt;/p&gt;
&lt;p&gt;Каждый этап конвейерной обработки CI/CD создает среду, настроенную на то, чтобы группы брали ответственность за соответствующую стадию тестирования, обеспечивая целостность процесса.&lt;/p&gt;
&lt;p&gt;Второй принцип CI/CD: снижение риска&lt;/p&gt;
&lt;p&gt;Каждый этап конвейерной обработки CI/CD создается для снижения риска в определенном аспекте. Разработчики отвечают за логические и письменные тесты, чтобы снизить риск нарушения логики. QE отвечают за целостность потока пользователей и записывают тесты для снижения риска сломанных потоков/ историй пользователей. BAs и POs отвечают за удобство использования и принимают участие в приемочных тестах пользователей, чтобы снизить риск создания непригодных / нежелательных функций. Ops/ DevOps несут участвуют в обслуживании CI/CD, связанные с развертыванием операций (анализ схемы данных/ миграции данных) и масштабирование, чтобы снизить риск недоступности продукта.&lt;/p&gt;
&lt;p&gt;Поскольку этапы предназначены для снижения конкретного риска, важно отметить, что при настройке конвейерной обработки каждый этап должен также служить шлюзом для контроля качества, который предотвращает прохождение поврежденных/ нежелательных функций.&lt;/p&gt;
&lt;p&gt;Третий принцип CI/CD: короткий цикл обратной связи&lt;/p&gt;
&lt;p&gt;Причина внедрения конвейерной обработки CI/CD — использование машин для работы с людьми. Это позволяет сократить время, затрачиваемое на обратную связь по разрабатываемым функциям.&lt;/p&gt;
&lt;p&gt;Но почему выгоднее использовать машины? Потому что люди не масштабируются, как машины. С помощью масштабирования сокращается время, затрачиваемое на тестирование программного обеспечения, что позволяет автоматизировать процесс развертывания. Эти процедуры займут гораздо больше времени, если будут выполняться человеком.&lt;/p&gt;
&lt;p&gt;Однако в ошибкоопасных ситуациях, требующих ввода данных человеком, автоматизация может быть нежелательной/ невозможной. Например, мы никогда не сможем автоматизировать тестер, когда дело доходит до удобства использования. Еще одним важным примером является миграция производственных данных. Автоматизируйте логистику кода (как код упакован/ перемещается между этапами), насколько это возможно, но имейте в виду: автоматизация в конечном итоге предназначена для сокращения времени, затрачиваемого на получение закомиченного кода. Если присутствуют ошибки, которые требуют больше времени для исправления, чем для предотвращения, избегайте автоматизации и старайтесь достичь короткого цикла обратной связи.&lt;/p&gt;
&lt;p&gt;Реализации среды в CI/CD&lt;/p&gt;
&lt;p&gt;Мы рассмотрим различные среды реализации CI/CD и то, что происходит на каждом этапе, ссылаясь на реализацию в проектах, над которыми я работаю. Каждая среда представлена как ветвь репозитория системы контроля кода.&lt;/p&gt;
&lt;p&gt;Разработка&lt;/p&gt;
&lt;p&gt;Наша команда разработчиков немногочисленна, поэтому мы используем разработку на базе магистралей, где все коммиты попадают в единую ветвь. Эта ветвь служит средой разработки и запускает тесты модулей/ систем на всех закомиченных кодах. Текущая версия ветви разработки проходит контроль качества (ветвь qa) и развертывается приложении, чтобы все разработчики могли просматривать, тестировать и проверять работоспособность кода, что обеспечивает совместную разработку.&lt;/p&gt;
&lt;p&gt;Контроль качества&lt;/p&gt;
&lt;p&gt;Продукт проходит процесс сборки, а тесты модулей/ систем снова запускаются в среде с конфигурациями производства на уровне приложений. Код развертывается в QA-версии нашей платформы, а тесты функций запускаются два раза в день. При прохождении регрессионных тестов код в ветви qa продвигается к ветви uat.&lt;/p&gt;
&lt;p&gt;Проверка приемлемости&lt;/p&gt;
&lt;p&gt;Мы разрешаем доступ к POs, чтобы оценить, были ли созданы функции, поскольку они были предусмотрены и переданы через пользовательские истории. При принятии посредством тестирования с выбранной группой пользователей истории, отмеченные как принятые, будут выпущены в продуктив при следующем развертывании.&lt;/p&gt;
&lt;p&gt;Тестирование интеграционных систем&lt;/p&gt;
&lt;p&gt;На этом этапе мы разворачиваем приложение в среде, которая имитирует производственную среду и запускает тесты, чтобы подтвердить работоспособность программного обеспечения. Также мы запускаем нефункциональные тесты, такие как тестирование нагрузки и тестирование безопасности, чтобы подтвердить, что приложение будет безопасным. Когда все тесты пройдут, мы наконец достигнем…&lt;/p&gt;
&lt;p&gt;Производство&lt;/p&gt;
&lt;p&gt;Пользователи получают возможность оценивать выпущенные функции.&lt;/p&gt;
&lt;p&gt;Инструменты для CI/CD
Локальные&lt;/p&gt;
&lt;p&gt;GitLab CI, TeamCity, Bamboo, GoCD Jenkins, Circle CI.&lt;/p&gt;
&lt;p&gt;Облачные&lt;/p&gt;
&lt;p&gt;BitBucket Pipelines, Heroku CI, Travis, Codeship, Buddy CI, AWS CodeBuild.&lt;/p&gt;
&lt;p&gt;Правительственные&lt;/p&gt;
&lt;p&gt;hats, Nectar.&lt;/p&gt;
&lt;p&gt;Наша команда использует GitLab в качестве репозитория кода и лидера CI из-за требований локального хостинга. В других проектах мы используем альтернативные варианты, предлагающие локальные опции, — Bamboo от Atlassian, TeamCity от JetBrains и GoCD от ThoughtWorks. Jenkins и CircleCI мы еще не использовали в наших проектах. (Оставьте комментарий, если вы когда-нибудь их использовали и удовлетворены этим.)&lt;/p&gt;
&lt;p&gt;Если у вас нет потребности в локальном хостинге, существует множество других облачных инструментов CI, таких как Codeship, Buddy CI и Travis. Для личных проектов все большее число репозиториев кода предоставляют решение «все-в-одном», которое дает доступ к инструментам CI. Недавно BitBucket запустил свой собственный бесплатный CI под названием Pipelines, ограниченный вычислительным временем, как и Heroku. GitHub также имеет бесплатную интеграцию с Travis, на случай если ваш проект — открытый исходный код. Если вы работаете в Amazon Web Services и получаете небольшой бюджет, то имейте в виду, что Amazon имеет собственные CI и CodeBuild.&lt;/p&gt;
&lt;p&gt;Для тех, кто работает в правительстве и хочет улучшить качество своих приложений, которые не могут быть размещены в общедоступном облаке, мы создали несколько готовых версий. Они разрешают работать с недавно запущенным решением — Hive Agile Testing Solution, которое позволяет запускать регрессионные тесты в вашем приложении, чтобы гарантировать, что функции не сломаются при обновлении платформы. Создание современного веб-приложения требует тестов для обеспечения соответствия государственной политики и среды развертывания? Используйте Nectar — платформу как услугу для государственных приложений. Она обеспечивает тестирование соответствия, а также развертывание в облаке правительства для приложений, созданных с использованием новейших технологий и методологий.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://example.com/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://example.com/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-wowchemy&#34;&gt;Create slides in Markdown with Wowchemy&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy&lt;/a&gt; | &lt;a href=&#34;https://owchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;porridge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;blueberry&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;porridge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;blueberry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Eating...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;span class=&#34;fragment &#34; &gt;
  One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  Three
&lt;/span&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% speaker_note %}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; Only the speaker can read these notes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; Press &lt;span class=&#34;sb&#34;&gt;`S`&lt;/span&gt; key to view
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  {{% /speaker_note %}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/media/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;slide&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/media/boards.jpg&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;slide&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;#0000FF&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;slide&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;my-style&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;navy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/discussions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example conference paper</title>
      <link>https://example.com/publication/example/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://example.com/publication/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Create your slides in Markdown - click the &lt;em&gt;Slides&lt;/em&gt; button to check out the example.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code, math, and images&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.com/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/admin/config.yml</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
