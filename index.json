[{"authors":null,"categories":null,"content":"Рытов Алексей Константинович является студентом факультета физико-математических наук. Его научные интересы относятся к точным наукам.\n","date":1653523200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1653523200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Рытов Алексей Константинович является студентом факультета физико-математических наук. Его научные интересы относятся к точным наукам.","tags":null,"title":"Рытов Алексей Константинович","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://example.com/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":null,"categories":null,"content":"Одним из самых своих первых проектов я бы хотел посвятить моей недавней идее, а именно - приложению на языке С# для простого способа выучивания иностранных слов. Оно будет выдавать пользователю список слов, которые пользователь будет должен перевести, причём пользователь может сам контролировать список интересующих его слов. Если вдруг пользователь неправильно перевёл слово, то ему показывается правильный ответ, и ошибка записывается в список ошибок, который пользователь может посмотреть в любое время. Концепция довольно простая, однако думаю это будет хороший опыт в разработкке простых приложений на С#.\n","date":1653523200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653523200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://example.com/project/example/","publishdate":"2022-05-26T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["С#"],"title":"Шпаргалка иностранных слов С#","type":"project"},{"authors":["Рытов Алексей Константинович"],"categories":["Demo"],"content":"Введение Язы́к программи́рования — формальный язык, предназначенный для записи компьютерных программ. Язык программирования определяет набор лексических, синтаксических и семантических правил, определяющих внешний вид программы и действия, которые выполнит исполнитель (обычно — ЭВМ) под её управлением.\nСо времени создания первых программируемых машин человечество придумало более восьми тысяч языков программирования (включая эзотерические, визуальные и игрушечные). Каждый год их число увеличивается. Некоторыми языками умеет пользоваться только небольшое число их собственных разработчиков, другие становятся известны миллионам людей. Профессиональные программисты могут владеть несколькими языками программирования.\nЯзык программирования предназначен для написания компьютерных программ, которые представляют собой набор правил, позволяющих компьютеру выполнить тот или иной вычислительный процесс, организовать управление различными объектами, и т. п. Язык программирования отличается от естественных языков тем, что предназначен для управления ЭВМ, в то время как естественные языки используются, прежде всего, для общения людей между собой. Большинство языков программирования использует специальные конструкции для определения и манипулирования структурами данных и управления процессом вычислений.\nКак правило, язык программирования определяется не только через спецификации стандарта языка, формально определяющие его синтаксис и семантику [⇨], но и через воплощения (реализации) стандарта — программные средства, обеспечивающие трансляцию или интерпретацию программ на этом языке [⇨]; такие программные средства различаются по производителю, марке и варианту (версии), времени выпуска, полноте воплощения стандарта, дополнительным возможностям; могут иметь определённые ошибки или особенности воплощения, влияющие на практику использования языка или даже на его стандарт.\nЯзыки низкого и высокого уровня Обычно под «уровнем языка» понимается:\nстепень отличия семантики языка от машинного кода целевой архитектуры процессора — другими словами, наименьший масштаб преобразований, которые должен претерпеть код программы перед тем, как он сможет исполняться (зачастую с существенной потерей эффективности) степень, в которой семантика языка учитывает особенности мышления человека, нежели машины — то есть уровень языка тем «ниже», чем он «ближе к машине», и тем «выше», чем он «ближе к человеку». Эта двойственность появилась в 1950-е годы, при создании языков Планкалкюль и Фортран. При их разработке ставились прямые намерения обеспечить более краткую запись часто встречающихся конструкций (например, арифметических выражений), чем требовали процессоры того времени. В этих языках вводился новый слой абстракции и предполагались преобразования программ в машинный язык, поэтому их назвали языками «высокого уровня», то есть надстройкой, надслоением над языком машины. Однако вскоре стало ясно, что эти определения вовсе не обязательно идут бок о бок. Так, история знает случаи, когда язык, традиционно считающийся «высокоуровневым», реализовывался аппаратно (см. Лисп-машина, Java Optimized Processor[en]), или когда язык, являющийся «низкоуровневым» на одной платформе, компилировался как «высокоуровневый» на другой (таким образом программы на CISC-ассемблере VAX использовались на RISC-машинах DEC Alpha — см. VAX Macro[en]). Таким образом, понятие уровня языка является не строго формальным, а скорее условным.\nК языкам низкого уровня относят, в первую очередь, машинные языки (или, на общеупотребимом жаргоне — машинные коды), то есть языки, реализованные непосредственно на аппаратном уровне. Их относят к первому поколению языков программирования[en]. Вскоре после них появились языки второго поколения[en] — так называемые «языки ассемблера». В простейшем случае они реализуют мнемонику над машинным языком для записи команд и их параметров (в частности, адресов в памяти). Кроме того, многие языки ассемблера включают и весьма развитый макроязык. Языки первого и второго поколения позволяют точно контролировать, как требуемая функциональность будет исполняться на данном процессоре с учётом особенностей его архитектуры. С одной стороны, это обеспечивает высокое быстродействие и компактность программ, но с другой, для переноса программы на другую аппаратную платформу её нужно перекодировать (а часто из-за различий архитектуры процессоров — и перепроектировать) с нуля. Большинство языков ассемблера являются бестиповыми, но существуют и типизированные языки ассемблера[en], нацеленные на обеспечение минимальной безопасности»\u0026gt; низкоуровневых программ.\nК 1970-м годам сложность программ выросла настолько, что превысила способность программистов управляться с ними, и это привело к огромным убыткам и застою в развитии информационных технологий. Ответом на эту проблему стало появление массы языков высокого уровня, предлагающих самые разные способы управления сложностью (подробнее см. парадигма программирования и языки для программирования в мелком и крупном масштабе). …","date":1653523200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653523200,"objectID":"92497c87c1053d4681bf08b3e0778e21","permalink":"https://example.com/post/4/","publishdate":"2022-05-26T00:00:00Z","relpermalink":"/post/4/","section":"post","summary":"Введение Язы́к программи́рования — формальный язык, предназначенный для записи компьютерных программ. Язык программирования определяет набор лексических, синтаксических и семантических правил, определяющих внешний вид программы и действия, которые выполнит исполнитель (обычно — ЭВМ) под её управлением.","tags":["Academic"],"title":"Языки научного программирования","type":"post"},{"authors":["Рытов Алексей Константинович"],"categories":["Demo"],"content":"Основы Составляя отчет по практике, студент оценивает результаты работы и делает выводы о своей квалификации, знаниях и навыках, полученных в вузе. Чтобы работу приняли, она должна быть не только грамотной и содержательной. Оформление отчета по ГОСТу позволит вам получить «отлично» или хотя бы «хорошо».\nОбычно требования к оформлению отчета прописывают в методичках. Если таковых не осталось на кафедре или в библиотеке, обратитесь к нормативным документам.\nОформление отчета по практике по ГОСТу отнимает много времени? Воспользуйтесь чужим опытом – скачайте работы, актуальные на текущий год, и посмотрите, как они оформлены. Главное, чтобы эти примеры сами соответствовали последним требованиям.\nСтруктура отчета по практике Отчет может содержать до 35-40 страниц. В некоторых случаях допускается увеличивать объем до 45 страниц. При этом на введение отводят две-три страницы. В работе может быть до четырех разделов.\nСогласно ГОСТам, отчет по практике должен иметь следующую структуру:\n— титульный лист; — план прохождения практики; — отзыв руководителя; — аннотация; — раздел с сокращениями и условными обозначениями; — оглавление и введение; — основная часть практической работы; — заключение; — использованная литература списком; — приложения и дополнительные материалы.\nПриложения включаются в практику по мере необходимости.\nВ отчет по практике всегда входит план и отзыв научного руководителя. Эти два раздела следуют в работе один за другим. После отзыва научного руководителя размещают аннотацию. В ней подчеркивается актуальность работы, размещается ее краткая характеристика. Введение должно содержать данные о практике: время, место, продолжительность практики, а также виды выполненных работ.\nТребования к оформлению работы Оформление работы по ГОСТ подразумевает не только строгую структуру, но и выбор определенных шрифтов и их размеров, грамотное оформление списка литературы и правильное размещение графических элементов в тексте.\nТекстовую часть практической работы выполняют тремя основными способами:\n— на компьютере согласно ГОСТ 2.004; — на пишущей машинке; — от руки – согласно ГОСТ 2.304 (речь идет об использовании чертежного шрифта).\nЕсли отчет набирают на компьютере и распечатывают на принтере, то работать следует в Word или аналогичном редакторе. Распечатывают отчет на листах А4. Текст набирают шрифтом Times New Roman. Заголовки разделов имеют размер шрифта 16 пунктов, заголовки подразделов — 14 пунктов. Основной текст выполняют обычным шрифтом размером в 14 пунктов. Шрифт в разделах и подразделах полужирный. При оформлении нужно выбрать одинарный межстрочный интервал.\nДополнительную информацию можно узнать в ГОСТ 2.105-79 и ГОСТ 7.32-2001.\nРазделы и подразделы в отчете Отчет по практике разбивают на разделы и подразделы. При необходимости в работу включают пункты и списки. Разделы практически всегда начинаются с нового листа. Их нумеруют арабскими цифрами в порядке очередности. Название раздела выравнивают по центру, для него используют полужирный шрифт Times New Roman (16 шингл).\nПодразделы нумеруют арабскими цифрами. Для названия разделов используют прописные буквы, для подразделов – строчные (за исключением первой). Последние выравнивают по левому краю, используя красную строку. Для подразделов используют полужирный шрифт (14 шингл).\nЖелательно, чтобы название разделов были максимально краткими – переносить слова нельзя. То же касается и подразделов. Расстояние между названием раздела и заголовком подраздела должно составлять 8 мм.\nПоля, отступы и страницы Как уже было сказано ранее, отчет по практике оформляется на листах формата А4. Это требование касается всех листов в работе, включая титульный. На листах не должно быть рамки и подобных элементов. Достаточно отступов: слева – 30 мм, справа – 10 мм, сверху – 15 мм, снизу – 20 мм.\nСтраницы нумеруют, отсчет начинается с титульного листа. Номер на титуле не проставляют.\nГрафика, таблицы и другие элементы В отчете по практике могут присутствовать графические элементы, таблицы и формулы.. Согласно ГОСТ, изображения, таблицы и схемы можно разместить:\n— сразу после абзаца, в котором упоминается элемент; — на следующей странице; — в приложении.\nНаиболее удобен первый способ: человек, который начнет читать отчет, точно не потеряет важные данные. Он сразу ознакомится со всеми графическими элементами.\nФормулы размещают непосредственно после упоминания. Их выравнивают по центру.\nФормулу можно создать с помощью редактора Equation Editor, а затем вставить в текст работы. Обычно используют 14 шингл для символов в формуле.\nТребования к форме изложения текста отчета Отдельные символы в отчете по практике употреблять нельзя:\n— значок диаметра (вместо этого пишут слово «диаметр»); — символ «-« для обозначения отрицательной температуры (вместо этого пишут слово «минус»); — индексы стандартов без регистрационного номера; — математические символы \u0026lt;, \u0026gt; и = без чисел.\nВ отчете по практике может быть собственная система наименований или сокращений, но только при наличии …","date":1652659200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652659200,"objectID":"a09d0a2cd798b819d78000be74c68bd3","permalink":"https://example.com/post/3/","publishdate":"2022-05-16T00:00:00Z","relpermalink":"/post/3/","section":"post","summary":"Основы Составляя отчет по практике, студент оценивает результаты работы и делает выводы о своей квалификации, знаниях и навыках, полученных в вузе. Чтобы работу приняли, она должна быть не только грамотной и содержательной.","tags":["Academic"],"title":"Оформление отчета","type":"post"},{"authors":["Рытов Алексей Константинович"],"categories":["Demo"],"content":"Что такое Markdown? Markdown — язык разметки текстов. Такие тексты легко писать и читать. Их можно без труда сконвертировать в HTML. Большинство программистов предпочитают Markdown для написания документации, описаний своих проектов, написания блогов и так далее.\nЧто это значит? «Язык разметки» — это просто набор соглашений, правил.\nДопустим, что вы общаетесь с другом по СМС. В них нельзя сделать текст жирным или наклонным. Вы договариваетесь с другом: если я пишу что-то вот так между звездочками, то считай, что это наклонный текст. А если я пишу что-то между двумя звездочками, то считай, что это жирный текст. Вы придумали правила.\nMarkdown — это набор подобных правил.\nПравила понятны разным программам и сайтам. Например, «Вопросы и ответы» в уроках на Хекслете поддерживают Markdown. Это значит, что вы можете писать туда тексты по правилам Markdown, а после нажатия «Отправить» разметка станет реальной: текст в одинарных звездочках станет наклонным, текст в двойных звездочках станет жирным и так далее. Это конвертация из Markdown в HTML.\nЗачем это нужно?  Для добавления разметки туда, где невозможна реальная разметка. Например, в простом текстовом файле или в тех же СМС, где невозможно выделение жирным, создание заголовков, выделение цитат и пр. Для более удобного написания текстов для последующей конвертации в HTML или другие форматы.  Синтаксис Markdown Это краткий справочник основных элементов синтаксиса Markdown. Единого стандарта не существует и разные версии Markdown могут отличаться в деталях. Но базовые элементы из списка ниже поддерживаются во всех стандартах.\nВыделение текста Этот текст будет наклонным (курсив) Этот текст будет наклонным (курсив)\nЭтот текст будет жирным Этот текст будет жирным\n_Можно вставлять один тип в другой\nЗаголовки Это самый крупный заголовок, он превращается в тег  ‘##’  ‘###’  ‘####’  ‘#####’  ‘######’ \nСсылки https://hexlet.io — текст простой ссылки станет кликабельной ссылкой автоматически Ссылкой можно сделать любой текст:\n‘[Это ссылка на Хекслет]’(https://hexlet.io)\nЦитата ‘\u0026gt;’ Это мудрая цитата ‘\u0026gt;’ Мудрого человека.\nКартинки ‘![Это опциональный alt-текст]’(/assets/images/markdown/markdown.png) Код Для выделения кода (или любого неотформатированного текста) используются специальные символы — обратные тики: `\nИногда нужно добавить кусок кода function(12); в обычную строчку текста. А иногда нужно вставить целый блок кода:\nconst func = (num) =\u0026gt; { if (num \u0026gt; 0) { return num - 1; } return num + 1; }; Списки Непронумерованный список:\n‘’ Пункт ‘’ Еще один пункт ‘’ Подпункт ‘’ Еще один подпункт Пронумерованный список:\n‘1.’ Пункт ‘1.’ Еще один пункт ‘1.’ Подпункт ‘1.’ Еще один подпункт В пронумерованном списке можно использовать любые числа — это не важно. При конвертации в HTML или другой формат числа станут правильными и последовательными (1, 2, 3 и т.д.).\nДополнительно про Markdown Markdown в Википедии\n","date":1652140800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652140800,"objectID":"84fd9322ca0817deac0ef95d0e3caa32","permalink":"https://example.com/post/2/","publishdate":"2022-05-10T00:00:00Z","relpermalink":"/post/2/","section":"post","summary":"Что такое Markdown? Markdown — язык разметки текстов. Такие тексты легко писать и читать. Их можно без труда сконвертировать в HTML. Большинство программистов предпочитают Markdown для написания документации, описаний своих проектов, написания блогов и так далее.","tags":["Academic"],"title":"Язык разметки Markdown","type":"post"},{"authors":["Рытов Алексей Константинович"],"categories":["Demo"],"content":"Принципы Концепция непрерывной интеграции и доставки (CI/CD) — основа наших тестирований. Для тех, кто не знает: CI/CD — концепция, которая реализуется как конвейер, облегчая слияние только что закомиченного кода в основную кодовую базу. Концепция позволяет запускать различные типы тестов на каждом этапе (выполнение интеграционного аспекта) и завершать его запуском с развертыванием закомиченного кода в фактический продукт, который видят конечные пользователи (выполнение доставки).\nCI/CD необходимы для разработки программного обеспечения с применением Agile-методологии, которая рекомендует использовать автоматическое тестирование для быстрой наладки рабочего программного обеспечения. Автоматическое тестирование дает заинтересованным лицам доступ к вновь созданным функциям и обеспечивает быструю обратную связь.\nНедавно я настраивал конвейерную обработку CI/CD для проекта as-of-yet-under-wraps, который предназначен для местных профессионалов, испытывающих трудности с поиском работы. Далее я расскажу, что сделал, и поделюсь своими мыслями о CI/CD.\nСодержание\nМы рассмотрим принципы CI/CD.\nПервый принцип CI/CD: сегрегация ответственности заинтересованных сторон. Второй принцип CI/CD: снижение риска. Третий принцип CI/CD: короткий цикл обратной связи. Реализации среды в CI/CD. Инструменты для CI/CD. Приступим.\nПервый принцип CI/CD: сегрегация ответственности заинтересованных сторон Одним из основных преимуществ CI/CD является своевременное участие различных заинтересованных сторон в любом проекте.\nРазработчики и дизайнеры (Devs) создают опыт и логику продукта, представленные в рассказах пользователей, и несут ответственность за создание работающий функций, доказывая это через модульные тесты.\nИнженеры по качеству (QE) отвечают за поддержание качества продукции, просмотр функций по мере их выполнения (см. определение «Готово») и вводят сквозные (E2E) функции / приемочные тесты, чтобы установить, что клиент получит продукт работающий без ошибок.\nБизнес-аналитики (BAs) и владельцы продуктов (POs) несут ответственность за приемлемость (например, стоимость бизнеса), что подтверждается взаимодействием с фактическими пользователями и созданием пользовательских историй. Они координируют и анализируют результаты приемочных тестов для проверки рассказов пользователей и, возможно, создания новых, основанных на отзывах.\nОперативный отдел (Ops)/ DevOps-инженеры несут ответственность за доступность продукта пользователям. Работая в области CI/CD, они масштабируют концепции по мере необходимости и разрабатывают логистику кода, чтобы код от разработчиков мог перейти в производственную среду и пользователи могли получать доступ.\nПользователи несут ответственность за использование продукта. Подразумевается, что продукт должен быть полезен и оправдывать усилия.\nКаждый этап конвейерной обработки CI/CD создает среду, настроенную на то, чтобы группы брали ответственность за соответствующую стадию тестирования, обеспечивая целостность процесса.\nВторой принцип CI/CD: снижение риска\nКаждый этап конвейерной обработки CI/CD создается для снижения риска в определенном аспекте. Разработчики отвечают за логические и письменные тесты, чтобы снизить риск нарушения логики. QE отвечают за целостность потока пользователей и записывают тесты для снижения риска сломанных потоков/ историй пользователей. BAs и POs отвечают за удобство использования и принимают участие в приемочных тестах пользователей, чтобы снизить риск создания непригодных / нежелательных функций. Ops/ DevOps несут участвуют в обслуживании CI/CD, связанные с развертыванием операций (анализ схемы данных/ миграции данных) и масштабирование, чтобы снизить риск недоступности продукта.\nПоскольку этапы предназначены для снижения конкретного риска, важно отметить, что при настройке конвейерной обработки каждый этап должен также служить шлюзом для контроля качества, который предотвращает прохождение поврежденных/ нежелательных функций.\nТретий принцип CI/CD: короткий цикл обратной связи\nПричина внедрения конвейерной обработки CI/CD — использование машин для работы с людьми. Это позволяет сократить время, затрачиваемое на обратную связь по разрабатываемым функциям.\nНо почему выгоднее использовать машины? Потому что люди не масштабируются, как машины. С помощью масштабирования сокращается время, затрачиваемое на тестирование программного обеспечения, что позволяет автоматизировать процесс развертывания. Эти процедуры займут гораздо больше времени, если будут выполняться человеком.\nОднако в ошибкоопасных ситуациях, требующих ввода данных человеком, автоматизация может быть нежелательной/ невозможной. Например, мы никогда не сможем автоматизировать тестер, когда дело доходит до удобства использования. Еще одним важным примером является миграция производственных данных. Автоматизируйте логистику кода (как код упакован/ перемещается между этапами), насколько это возможно, но имейте в виду: автоматизация в конечном итоге предназначена для сокращения времени, затрачиваемого на получение закомиченного …","date":1651795200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651795200,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://example.com/post/getting-started/","publishdate":"2022-05-06T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Принципы Концепция непрерывной интеграции и доставки (CI/CD) — основа наших тестирований. Для тех, кто не знает: CI/CD — концепция, которая реализуется как конвейер, облегчая слияние только что закомиченного кода в основную кодовую базу.","tags":["Academic"],"title":"CI/CD","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://example.com/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Рытов Алексей Константинович","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://example.com/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]